select t1.Id FROM table t1 join table t2 on t1.Id = t2.Id where t1.Id = 1

Original
Project(Id, rows=100000) -> t1.Id
 JoinSet(t1 (Inner) x t2 (Inner), rows=100000) -> t1.Id, t1.Unordered, t1.Name, t1.CategoricalInt, t1.CategoricalString, t2.Id, t2.Unordered, t2.Name, t2.CategoricalInt, t2.CategoricalString 
 UnaryEdge { Expression = Id = 1, Relation = t1 }
 BinaryEdge { Expression = Id = Id, One = t1, Two = t2 }
    Scan(table, rows=100000) -> t1.Id, t1.Unordered, t1.Name, t1.CategoricalInt, t1.CategoricalString    
    Scan(table, rows=100000) -> t2.Id, t2.Unordered, t2.Name, t2.CategoricalInt, t2.CategoricalString    


Optimized
Project(Id, rows=20000) -> t1.Id
 Join(Inner on Id = Id, rows=20000) -> t2.Id, t1.Id 
    Scan(table, rows=100000) with projection  -> t2.Id    
 
    Filter(Id = 1, rows=20000) -> t1.Id    
       Scan(table, rows=100000) with projection  -> t1.Id       


Cost Optimized
Project(Id) cost (output_rows=20000, cpu=20000, disk=0, total=462) -> .Id
 HashJoin(Inner Id, Id) cost (output_rows=20000, cpu=140000, disk=0, total=442) -> t2.Id, t1.Id 
    FileScan({SolutionDirectory}data.parquet) cost (output_rows=100000, cpu=100000, disk=10, total=101) -> t2.Id 
    Filter(Id = 1) cost (output_rows=20000, cpu=100000, disk=0, total=201) -> t1.Id    
       FileScan({SolutionDirectory}data.parquet) cost (output_rows=100000, cpu=100000, disk=10, total=101) -> t1.Id