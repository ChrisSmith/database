SELECT
    o_year,
    SUM(CASE
        WHEN nation = 'BRAZIL' THEN volume
        ELSE 0
    END) / SUM(volume) AS mkt_share
FROM (
    SELECT
        EXTRACT(year FROM o_orderdate) AS o_year,
        l_extendedprice * (1 - l_discount) AS volume,
        n2.n_name AS nation
    FROM
        part,
        supplier,
        lineitem,
        orders,
        customer,
        nation n1,
        nation n2,
        region
    WHERE
        p_partkey = l_partkey
        AND s_suppkey = l_suppkey
        AND l_orderkey = o_orderkey
        AND o_custkey = c_custkey
        AND c_nationkey = n1.n_nationkey
        AND n1.n_regionkey = r_regionkey
        AND r_name = 'AMERICA'
        AND s_nationkey = n2.n_nationkey
        AND o_orderdate BETWEEN DATE '1995-01-01' AND DATE '1996-12-31'
        AND p_type = 'ECONOMY ANODIZED STEEL'
) AS all_nations
GROUP BY
    o_year
ORDER BY
    o_year;


Original
Project(o_year, SUM(CASE(WHEN nation = BRAZIL THEN volume)) / SUM(volume), rows=6001215) -> .o_year, .mkt_share
 Sort(o_year ASC), rows=6001215 -> .SUM(CASE(WHEN nation = BRAZIL THEN volume)), .SUM(volume), .o_year 
    Agg(SUM(CASE(WHEN nation = BRAZIL THEN volume)), SUM(volume), o_year) group by (o_year, rows=6001215) -> .SUM(CASE(WHEN nation = BRAZIL THEN volume)), .SUM(volume), .o_year    
       Project(EXTRACT(year, o_orderdate), l_extendedprice * cast(1 as Decimal) - l_discount, n_name, rows=6001215) -> all_nations.o_year, all_nations.volume, all_nations.nation       
          JoinSet(part (Inner) x supplier (Inner) x lineitem (Inner) x orders (Inner) x customer (Inner) x n1 (Inner) x n2 (Inner) x region (Inner), rows=6001215) -> .p_partkey, .p_name, .p_mfgr, .p_brand, .p_type, .p_size, .p_container, .p_retailprice, .p_comment, .s_suppkey, .s_name, .s_address, .s_nationkey, .s_phone, .s_acctbal, .s_comment, .l_orderkey, .l_partkey, .l_suppkey, .l_linenumber, .l_quantity, .l_extendedprice, .l_discount, .l_tax, .l_returnflag, .l_linestatus, .l_shipdate, .l_commitdate, .l_receiptdate, .l_shipinstruct, .l_shipmode, .l_comment, .o_orderkey, .o_custkey, .o_orderstatus, .o_totalprice, .o_orderdate, .o_orderpriority, .o_clerk, .o_shippriority, .o_comment, .c_custkey, .c_name, .c_address, .c_nationkey, .c_phone, .c_acctbal, .c_mktsegment, .c_comment, n1.n_nationkey, n1.n_name, n1.n_regionkey, n1.n_comment, n2.n_nationkey, n2.n_name, n2.n_regionkey, n2.n_comment, .r_regionkey, .r_name, .r_comment          
          BinaryEdge { Expression = p_partkey = l_partkey, One = part, Two = lineitem }
          BinaryEdge { Expression = s_suppkey = l_suppkey, One = supplier, Two = lineitem }
          BinaryEdge { Expression = l_orderkey = o_orderkey, One = lineitem, Two = orders }
          BinaryEdge { Expression = o_custkey = c_custkey, One = orders, Two = customer }
          BinaryEdge { Expression = c_nationkey = n_nationkey, One = customer, Two = n1 }
          BinaryEdge { Expression = n_regionkey = r_regionkey, One = n1, Two = region }
          UnaryEdge { Expression = r_name = AMERICA, Relation = region }
          BinaryEdge { Expression = s_nationkey = n_nationkey, One = supplier, Two = n2 }
          UnaryEdge { Expression = o_orderdate between 01/01/1995 00:00:00 and 12/31/1996 00:00:00, Relation = orders }
          UnaryEdge { Expression = p_type = ECONOMY ANODIZED STEEL, Relation = part }
             Scan(part, rows=200000) -> .p_partkey, .p_name, .p_mfgr, .p_brand, .p_type, .p_size, .p_container, .p_retailprice, .p_comment             
             Scan(supplier, rows=10000) -> .s_suppkey, .s_name, .s_address, .s_nationkey, .s_phone, .s_acctbal, .s_comment             
             Scan(lineitem, rows=6001215) -> .l_orderkey, .l_partkey, .l_suppkey, .l_linenumber, .l_quantity, .l_extendedprice, .l_discount, .l_tax, .l_returnflag, .l_linestatus, .l_shipdate, .l_commitdate, .l_receiptdate, .l_shipinstruct, .l_shipmode, .l_comment             
             Scan(orders, rows=1500000) -> .o_orderkey, .o_custkey, .o_orderstatus, .o_totalprice, .o_orderdate, .o_orderpriority, .o_clerk, .o_shippriority, .o_comment             
             Scan(customer, rows=150000) -> .c_custkey, .c_name, .c_address, .c_nationkey, .c_phone, .c_acctbal, .c_mktsegment, .c_comment             
             Scan(nation, rows=25) -> n1.n_nationkey, n1.n_name, n1.n_regionkey, n1.n_comment             
             Scan(nation, rows=25) -> n2.n_nationkey, n2.n_name, n2.n_regionkey, n2.n_comment             
             Scan(region, rows=5) -> .r_regionkey, .r_name, .r_comment             


Optimized
Project(o_year, SUM(CASE(WHEN nation = BRAZIL THEN volume)) / SUM(volume), rows=6001215) -> .o_year, .mkt_share
 Sort(o_year ASC), rows=6001215 -> .SUM(CASE(WHEN nation = BRAZIL THEN volume)), .SUM(volume), .o_year 
    Agg(SUM(CASE(WHEN nation = BRAZIL THEN volume)), SUM(volume), o_year) group by (o_year, rows=6001215) -> .SUM(CASE(WHEN nation = BRAZIL THEN volume)), .SUM(volume), .o_year    
       Project(EXTRACT(year, o_orderdate), l_extendedprice * cast(1 as Decimal) - l_discount, n_name, rows=6001215) -> all_nations.o_year, all_nations.volume, all_nations.nation       
          Join(Inner on n_regionkey = r_regionkey, rows=6001215) -> .l_orderkey, .l_partkey, .l_suppkey, .l_extendedprice, .l_discount, .p_partkey, .p_type, .s_suppkey, .s_nationkey, n2.n_nationkey, n2.n_name, n2.n_regionkey, .o_orderkey, .o_custkey, .o_orderdate, .c_custkey, .c_nationkey, n1.n_nationkey, n1.n_name, n1.n_regionkey, .r_regionkey, .r_name          
             Join(Inner on c_nationkey = n_nationkey, rows=6001215) -> .l_orderkey, .l_partkey, .l_suppkey, .l_extendedprice, .l_discount, .p_partkey, .p_type, .s_suppkey, .s_nationkey, n2.n_nationkey, n2.n_name, n2.n_regionkey, .o_orderkey, .o_custkey, .o_orderdate, .c_custkey, .c_nationkey, n1.n_nationkey, n1.n_name, n1.n_regionkey             
                Join(Inner on o_custkey = c_custkey, rows=6001215) -> .l_orderkey, .l_partkey, .l_suppkey, .l_extendedprice, .l_discount, .p_partkey, .p_type, .s_suppkey, .s_nationkey, n2.n_nationkey, n2.n_name, n2.n_regionkey, .o_orderkey, .o_custkey, .o_orderdate, .c_custkey, .c_nationkey                
                   Join(Inner on l_orderkey = o_orderkey, rows=6001215) -> .l_orderkey, .l_partkey, .l_suppkey, .l_extendedprice, .l_discount, .p_partkey, .p_type, .s_suppkey, .s_nationkey, n2.n_nationkey, n2.n_name, n2.n_regionkey, .o_orderkey, .o_custkey, .o_orderdate                   
                      Join(Inner on s_nationkey = n_nationkey, rows=6001215) -> .l_orderkey, .l_partkey, .l_suppkey, .l_extendedprice, .l_discount, .p_partkey, .p_type, .s_suppkey, .s_nationkey, n2.n_nationkey, n2.n_name, n2.n_regionkey                      
                         Join(Inner on s_suppkey = l_suppkey, rows=6001215) -> .l_orderkey, .l_partkey, .l_suppkey, .l_extendedprice, .l_discount, .p_partkey, .p_type, .s_suppkey, .s_nationkey                         
                            Join(Inner on p_partkey = l_partkey, rows=6001215) -> .l_orderkey, .l_partkey, .l_suppkey, .l_extendedprice, .l_discount, .p_partkey, .p_type                            
                               Scan(lineitem, rows=6001215) with projection  -> .l_orderkey, .l_partkey, .l_suppkey, .l_extendedprice, .l_discount                               
                            
                               Filter(p_type = ECONOMY ANODIZED STEEL, rows=40000) -> .p_partkey, .p_type                               
                                  Scan(part, rows=200000) with projection  -> .p_partkey, .p_type                                  
                         
                            Scan(supplier, rows=10000) with projection  -> .s_suppkey, .s_nationkey                            
                      
                         Scan(nation, rows=25) with projection  -> n2.n_nationkey, n2.n_name, n2.n_regionkey                         
                   
                      Filter(o_orderdate between 01/01/1995 00:00:00 and 12/31/1996 00:00:00, rows=1350000) -> .o_orderkey, .o_custkey, .o_orderdate                      
                         Scan(orders, rows=1500000) with projection  -> .o_orderkey, .o_custkey, .o_orderdate                         
                
                   Scan(customer, rows=150000) with projection  -> .c_custkey, .c_nationkey                   
             
                Scan(nation, rows=25) with projection  -> n1.n_nationkey, n1.n_name, n1.n_regionkey                
          
             Filter(r_name = AMERICA, rows=1) -> .r_regionkey, .r_name             
                Scan(region, rows=5) with projection  -> .r_regionkey, .r_name                


Cost Optimized
Project(o_year, SUM(CASE(WHEN nation = BRAZIL THEN volume)) / SUM(volume)) cost (output_rows=10, cpu=30, disk=0, total=145455) -> .o_year, .mkt_share
 Sort(o_year ASC) cost (output_rows=10, cpu=30, disk=0, total=145455) -> .o_year, .SUM(CASE(WHEN nation = BRAZIL THEN volume)), .SUM(volume) 
    HashAggregate(o_year, SUM(CASE(WHEN nation = BRAZIL THEN volume)), SUM(volume)) cost (output_rows=10, cpu=60012150, disk=0, total=145455) -> .o_year, .SUM(CASE(WHEN nation = BRAZIL THEN volume)), .SUM(volume)    
       Project(EXTRACT(year, o_orderdate), l_extendedprice * cast(1 as Decimal) - l_discount, n_name) cost (output_rows=6001215, cpu=30006075, disk=0, total=85442) -> all_nations.o_year, all_nations.volume, all_nations.nation       
          HashJoin(Inner r_regionkey, n_regionkey) cost (output_rows=6001215, cpu=6001215, disk=0, total=55436) -> .l_orderkey, .l_partkey, .l_suppkey, .l_extendedprice, .l_discount, .p_partkey, .p_type, .s_suppkey, .s_nationkey, n2.n_nationkey, n2.n_name, n2.n_regionkey, .o_orderkey, .o_custkey, .o_orderdate, .c_custkey, .c_nationkey, n1.n_nationkey, n1.n_name, n1.n_regionkey, .r_regionkey, .r_name          
             HashJoin(Inner n_nationkey, c_nationkey) cost (output_rows=6001215, cpu=6001265, disk=0, total=49434) -> .l_orderkey, .l_partkey, .l_suppkey, .l_extendedprice, .l_discount, .p_partkey, .p_type, .s_suppkey, .s_nationkey, n2.n_nationkey, n2.n_name, n2.n_regionkey, .o_orderkey, .o_custkey, .o_orderdate, .c_custkey, .c_nationkey, n1.n_nationkey, n1.n_name, n1.n_regionkey             
                HashJoin(Inner c_custkey, o_custkey) cost (output_rows=6001215, cpu=6301215, disk=0, total=43433) -> .l_orderkey, .l_partkey, .l_suppkey, .l_extendedprice, .l_discount, .p_partkey, .p_type, .s_suppkey, .s_nationkey, n2.n_nationkey, n2.n_name, n2.n_regionkey, .o_orderkey, .o_custkey, .o_orderdate, .c_custkey, .c_nationkey                
                   HashJoin(Inner o_orderkey, l_orderkey) cost (output_rows=6001215, cpu=6301215, disk=0, total=36982) -> .l_orderkey, .l_partkey, .l_suppkey, .l_extendedprice, .l_discount, .p_partkey, .p_type, .s_suppkey, .s_nationkey, n2.n_nationkey, n2.n_name, n2.n_regionkey, .o_orderkey, .o_custkey, .o_orderdate                   
                      HashJoin(Inner n_nationkey, s_nationkey) cost (output_rows=6001215, cpu=6001265, disk=0, total=24679) -> .l_orderkey, .l_partkey, .l_suppkey, .l_extendedprice, .l_discount, .p_partkey, .p_type, .s_suppkey, .s_nationkey, n2.n_nationkey, n2.n_name, n2.n_regionkey                      
                         HashJoin(Inner s_suppkey, l_suppkey) cost (output_rows=6001215, cpu=6021215, disk=0, total=18678) -> .l_orderkey, .l_partkey, .l_suppkey, .l_extendedprice, .l_discount, .p_partkey, .p_type, .s_suppkey, .s_nationkey                         
                            HashJoin(Inner p_partkey, l_partkey) cost (output_rows=6001215, cpu=6041215, disk=0, total=12647) -> .l_orderkey, .l_partkey, .l_suppkey, .l_extendedprice, .l_discount, .p_partkey, .p_type                            
                               FileScan({SolutionDirectory}tpch/1/lineitem2.parquet) cost (output_rows=6001215, cpu=6001215, disk=49, total=6005) -> .l_orderkey, .l_partkey, .l_suppkey, .l_extendedprice, .l_discount                            
                               Filter(p_type = ECONOMY ANODIZED STEEL) cost (output_rows=20000, cpu=400000, disk=0, total=600) -> .p_partkey, .p_type                               
                                  FileScan({SolutionDirectory}tpch/1/part2.parquet) cost (output_rows=200000, cpu=200000, disk=2, total=200) -> .p_partkey, .p_type                         
                            FileScan({SolutionDirectory}tpch/1/supplier2.parquet) cost (output_rows=10000, cpu=10000, disk=1, total=10) -> .s_suppkey, .s_nationkey                      
                         FileScan({SolutionDirectory}tpch/1/nation2.parquet) cost (output_rows=25, cpu=25, disk=1, total=0) -> n2.n_nationkey, n2.n_name, n2.n_regionkey                   
                      Filter(o_orderdate between 01/01/1995 00:00:00 and 12/31/1996 00:00:00) cost (output_rows=150000, cpu=4500000, disk=0, total=6001) -> .o_orderkey, .o_custkey, .o_orderdate                      
                         FileScan({SolutionDirectory}tpch/1/orders2.parquet) cost (output_rows=1500000, cpu=1500000, disk=13, total=1501) -> .o_orderkey, .o_custkey, .o_orderdate                
                   FileScan({SolutionDirectory}tpch/1/customer2.parquet) cost (output_rows=150000, cpu=150000, disk=2, total=150) -> .c_custkey, .c_nationkey             
                FileScan({SolutionDirectory}tpch/1/nation2.parquet) cost (output_rows=25, cpu=25, disk=1, total=0) -> n1.n_nationkey, n1.n_name, n1.n_regionkey          
             Filter(r_name = AMERICA) cost (output_rows=0, cpu=10, disk=0, total=0) -> .r_regionkey, .r_name             
                FileScan({SolutionDirectory}tpch/1/region2.parquet) cost (output_rows=5, cpu=5, disk=1, total=0) -> .r_regionkey, .r_name