select
    s_acctbal,
    s_name,
    n_name,
    p_partkey,
    p_mfgr,
    s_address,
    s_phone,
    s_comment
from
    part,
    supplier,
    partsupp,
    nation,
    region
where
        p_partkey = ps_partkey
    and s_suppkey = ps_suppkey
    and p_size = 15
    and p_type like '%BRASS'
    and s_nationkey = n_nationkey
    and n_regionkey = r_regionkey
    and r_name = 'EUROPE'
    and ps_supplycost = (
        select
            min(ps_supplycost)
            from partsupp, supplier, nation, region
            where
                p_partkey = ps_partkey
            and s_suppkey = ps_suppkey
            and s_nationkey = n_nationkey
            and n_regionkey = r_regionkey
            and r_name = 'EUROPE'
        )
order by
    s_acctbal desc,
    n_name,
    s_name,
    p_partkey
limit 100;


Original
Limit(n=100) -> .s_acctbal, .s_name, .n_name, .p_partkey, .p_mfgr, .s_address, .s_phone, .s_comment
 Project(s_acctbal, s_name, n_name, p_partkey, p_mfgr, s_address, s_phone, s_comment, rows=800000) -> .s_acctbal, .s_name, .n_name, .p_partkey, .p_mfgr, .s_address, .s_phone, .s_comment 
    Sort(s_acctbal DESC, n_name ASC, s_name ASC, p_partkey ASC), rows=800000 -> .p_partkey, .p_name, .p_mfgr, .p_brand, .p_type, .p_size, .p_container, .p_retailprice, .p_comment, .s_suppkey, .s_name, .s_address, .s_nationkey, .s_phone, .s_acctbal, .s_comment, .ps_partkey, .ps_suppkey, .ps_availqty, .ps_supplycost, .ps_comment, .n_nationkey, .n_name, .n_regionkey, .n_comment, .r_regionkey, .r_name, .r_comment    
       Apply(c=1, rows=800000) -> .p_partkey, .p_name, .p_mfgr, .p_brand, .p_type, .p_size, .p_container, .p_retailprice, .p_comment, .s_suppkey, .s_name, .s_address, .s_nationkey, .s_phone, .s_acctbal, .s_comment, .ps_partkey, .ps_suppkey, .ps_availqty, .ps_supplycost, .ps_comment, .n_nationkey, .n_name, .n_regionkey, .n_comment, .r_regionkey, .r_name, .r_comment       
          Project(min(ps_supplycost), rows=800000) -> .min(ps_supplycost)          
             Agg(min(ps_supplycost)) group by (, rows=800000) -> .min(ps_supplycost)             
                JoinSet(partsupp (Inner) x supplier (Inner) x nation (Inner) x region (Inner), rows=800000) -> .ps_partkey, .ps_suppkey, .ps_availqty, .ps_supplycost, .ps_comment, .s_suppkey, .s_name, .s_address, .s_nationkey, .s_phone, .s_acctbal, .s_comment, .n_nationkey, .n_name, .n_regionkey, .n_comment, .r_regionkey, .r_name, .r_comment                
                BinaryEdge { Expression = s_suppkey = ps_suppkey, One = partsupp, Two = supplier }
                BinaryEdge { Expression = s_nationkey = n_nationkey, One = supplier, Two = nation }
                BinaryEdge { Expression = n_regionkey = r_regionkey, One = nation, Two = region }
                UnaryEdge { Expression = r_name = EUROPE, Relation = region }
                p_partkey = ps_partkey
                   Scan(partsupp, rows=800000) -> .ps_partkey, .ps_suppkey, .ps_availqty, .ps_supplycost, .ps_comment                   
                   Scan(supplier, rows=10000) -> .s_suppkey, .s_name, .s_address, .s_nationkey, .s_phone, .s_acctbal, .s_comment                   
                   Scan(nation, rows=25) -> .n_nationkey, .n_name, .n_regionkey, .n_comment                   
                   Scan(region, rows=5) -> .r_regionkey, .r_name, .r_comment                   
          JoinSet(part (Inner) x supplier (Inner) x partsupp (Inner) x nation (Inner) x region (Inner), rows=800000) -> .p_partkey, .p_name, .p_mfgr, .p_brand, .p_type, .p_size, .p_container, .p_retailprice, .p_comment, .s_suppkey, .s_name, .s_address, .s_nationkey, .s_phone, .s_acctbal, .s_comment, .ps_partkey, .ps_suppkey, .ps_availqty, .ps_supplycost, .ps_comment, .n_nationkey, .n_name, .n_regionkey, .n_comment, .r_regionkey, .r_name, .r_comment          
          BinaryEdge { Expression = p_partkey = ps_partkey, One = part, Two = partsupp }
          BinaryEdge { Expression = s_suppkey = ps_suppkey, One = supplier, Two = partsupp }
          UnaryEdge { Expression = p_size = 15, Relation = part }
          UnaryEdge { Expression = ends_with(p_type, BRASS), Relation = part }
          BinaryEdge { Expression = s_nationkey = n_nationkey, One = supplier, Two = nation }
          BinaryEdge { Expression = n_regionkey = r_regionkey, One = nation, Two = region }
          UnaryEdge { Expression = r_name = EUROPE, Relation = region }
          UnaryEdge { Expression = ps_supplycost = correlated-subquery(1), Relation = partsupp }
             Scan(part, rows=200000) -> .p_partkey, .p_name, .p_mfgr, .p_brand, .p_type, .p_size, .p_container, .p_retailprice, .p_comment             
             Scan(supplier, rows=10000) -> .s_suppkey, .s_name, .s_address, .s_nationkey, .s_phone, .s_acctbal, .s_comment             
             Scan(partsupp, rows=800000) -> .ps_partkey, .ps_suppkey, .ps_availqty, .ps_supplycost, .ps_comment             
             Scan(nation, rows=25) -> .n_nationkey, .n_name, .n_regionkey, .n_comment             
             Scan(region, rows=5) -> .r_regionkey, .r_name, .r_comment             


Optimized
Project(s_acctbal, s_name, n_name, p_partkey, p_mfgr, s_address, s_phone, s_comment, rows=100) -> .s_acctbal, .s_name, .n_name, .p_partkey, .p_mfgr, .s_address, .s_phone, .s_comment
 TopSort(n=100, s_acctbal DESC, n_name ASC, s_name ASC, p_partkey ASC) -> .ps_partkey, .ps_suppkey, .ps_supplycost, .p_partkey, .p_mfgr, .p_type, .p_size, .s_suppkey, .s_name, .s_address, .s_nationkey, .s_phone, .s_acctbal, .s_comment, .n_nationkey, .n_name, .n_regionkey, .r_regionkey, .r_name, correlated0.ps_partkey, correlated0.min(ps_supplycost) 
    Filter(ps_supplycost = min(ps_supplycost), rows=160000) -> .ps_partkey, .ps_suppkey, .ps_supplycost, .p_partkey, .p_mfgr, .p_type, .p_size, .s_suppkey, .s_name, .s_address, .s_nationkey, .s_phone, .s_acctbal, .s_comment, .n_nationkey, .n_name, .n_regionkey, .r_regionkey, .r_name, correlated0.ps_partkey, correlated0.min(ps_supplycost)    
       Join(Inner on p_partkey = ps_partkey, rows=800000) -> .ps_partkey, .ps_suppkey, .ps_supplycost, .p_partkey, .p_mfgr, .p_type, .p_size, .s_suppkey, .s_name, .s_address, .s_nationkey, .s_phone, .s_acctbal, .s_comment, .n_nationkey, .n_name, .n_regionkey, .r_regionkey, .r_name, correlated0.ps_partkey, correlated0.min(ps_supplycost)       
          Join(Inner on n_regionkey = r_regionkey, rows=800000) -> .ps_partkey, .ps_suppkey, .ps_supplycost, .p_partkey, .p_mfgr, .p_type, .p_size, .s_suppkey, .s_name, .s_address, .s_nationkey, .s_phone, .s_acctbal, .s_comment, .n_nationkey, .n_name, .n_regionkey, .r_regionkey, .r_name          
             Join(Inner on s_nationkey = n_nationkey, rows=800000) -> .ps_partkey, .ps_suppkey, .ps_supplycost, .p_partkey, .p_mfgr, .p_type, .p_size, .s_suppkey, .s_name, .s_address, .s_nationkey, .s_phone, .s_acctbal, .s_comment, .n_nationkey, .n_name, .n_regionkey             
                Join(Inner on s_suppkey = ps_suppkey, rows=800000) -> .ps_partkey, .ps_suppkey, .ps_supplycost, .p_partkey, .p_mfgr, .p_type, .p_size, .s_suppkey, .s_name, .s_address, .s_nationkey, .s_phone, .s_acctbal, .s_comment                
                   Join(Inner on p_partkey = ps_partkey, rows=800000) -> .ps_partkey, .ps_suppkey, .ps_supplycost, .p_partkey, .p_mfgr, .p_type, .p_size                   
                      Scan(partsupp, rows=800000) with projection  -> .ps_partkey, .ps_suppkey, .ps_supplycost                      
                   
                      Filter(ends_with(p_type, BRASS), rows=36000) -> .p_partkey, .p_mfgr, .p_type, .p_size                      
                         Filter(p_size = 15, rows=40000) -> .p_partkey, .p_mfgr, .p_type, .p_size                         
                            Scan(part, rows=200000) with projection  -> .p_partkey, .p_mfgr, .p_type, .p_size                            
                
                   Scan(supplier, rows=10000) with projection  -> .s_suppkey, .s_name, .s_address, .s_nationkey, .s_phone, .s_acctbal, .s_comment                   
             
                Scan(nation, rows=25) with projection  -> .n_nationkey, .n_name, .n_regionkey                
          
             Filter(r_name = EUROPE, rows=1) -> .r_regionkey, .r_name             
                Scan(region, rows=5) with projection  -> .r_regionkey, .r_name                
       
          Agg(ps_partkey, min(ps_supplycost)) group by (ps_partkey, rows=800000) -> correlated0.ps_partkey, correlated0.min(ps_supplycost)          
             Join(Inner on n_regionkey = r_regionkey, rows=800000) -> .ps_partkey, .ps_suppkey, .ps_supplycost, .s_suppkey, .s_name, .s_address, .s_nationkey, .s_phone, .s_acctbal, .s_comment, .n_nationkey, .n_name, .n_regionkey, .r_regionkey, .r_name             
                Join(Inner on s_nationkey = n_nationkey, rows=800000) -> .ps_partkey, .ps_suppkey, .ps_supplycost, .s_suppkey, .s_name, .s_address, .s_nationkey, .s_phone, .s_acctbal, .s_comment, .n_nationkey, .n_name, .n_regionkey                
                   Join(Inner on s_suppkey = ps_suppkey, rows=800000) -> .ps_partkey, .ps_suppkey, .ps_supplycost, .s_suppkey, .s_name, .s_address, .s_nationkey, .s_phone, .s_acctbal, .s_comment                   
                      Scan(partsupp, rows=800000) with projection  -> .ps_partkey, .ps_suppkey, .ps_supplycost                      
                   
                      Scan(supplier, rows=10000) with projection  -> .s_suppkey, .s_name, .s_address, .s_nationkey, .s_phone, .s_acctbal, .s_comment                      
                
                   Scan(nation, rows=25) with projection  -> .n_nationkey, .n_name, .n_regionkey                   
             
                Filter(r_name = EUROPE, rows=1) -> .r_regionkey, .r_name                
                   Scan(region, rows=5) with projection  -> .r_regionkey, .r_name                   


Cost Optimized
Project(s_acctbal, s_name, n_name, p_partkey, p_mfgr, s_address, s_phone, s_comment) cost (output_rows=100, cpu=800, disk=0, total=35867) -> .s_acctbal, .s_name, .n_name, .p_partkey, .p_mfgr, .s_address, .s_phone, .s_comment
 TopSort(n=100, s_acctbal DESC, n_name ASC, s_name ASC, p_partkey ASC) -> .ps_partkey, .ps_suppkey, .ps_supplycost, .p_partkey, .p_mfgr, .p_type, .p_size, .s_suppkey, .s_name, .s_address, .s_nationkey, .s_phone, .s_acctbal, .s_comment, .n_nationkey, .n_name, .n_regionkey, .r_regionkey, .r_name, correlated0.ps_partkey, correlated0.min(ps_supplycost) 
    Filter(ps_supplycost = min(ps_supplycost)) cost (output_rows=80000, cpu=16800000, disk=0, total=30746) -> .ps_partkey, .ps_suppkey, .ps_supplycost, .p_partkey, .p_mfgr, .p_type, .p_size, .s_suppkey, .s_name, .s_address, .s_nationkey, .s_phone, .s_acctbal, .s_comment, .n_nationkey, .n_name, .n_regionkey, .r_regionkey, .r_name, correlated0.ps_partkey, correlated0.min(ps_supplycost)    
       HashJoin(Inner ps_partkey, p_partkey) cost (output_rows=800000, cpu=800020, disk=0, total=13946) -> .ps_partkey, .ps_suppkey, .ps_supplycost, .p_partkey, .p_mfgr, .p_type, .p_size, .s_suppkey, .s_name, .s_address, .s_nationkey, .s_phone, .s_acctbal, .s_comment, .n_nationkey, .n_name, .n_regionkey, .r_regionkey, .r_name, correlated0.ps_partkey, correlated0.min(ps_supplycost)       
          HashJoin(Inner r_regionkey, n_regionkey) cost (output_rows=800000, cpu=800000, disk=0, total=5115) -> .ps_partkey, .ps_suppkey, .ps_supplycost, .p_partkey, .p_mfgr, .p_type, .p_size, .s_suppkey, .s_name, .s_address, .s_nationkey, .s_phone, .s_acctbal, .s_comment, .n_nationkey, .n_name, .n_regionkey, .r_regionkey, .r_name          
             HashJoin(Inner n_nationkey, s_nationkey) cost (output_rows=800000, cpu=800050, disk=0, total=4315) -> .ps_partkey, .ps_suppkey, .ps_supplycost, .p_partkey, .p_mfgr, .p_type, .p_size, .s_suppkey, .s_name, .s_address, .s_nationkey, .s_phone, .s_acctbal, .s_comment, .n_nationkey, .n_name, .n_regionkey             
                HashJoin(Inner s_suppkey, ps_suppkey) cost (output_rows=800000, cpu=820000, disk=0, total=3515) -> .ps_partkey, .ps_suppkey, .ps_supplycost, .p_partkey, .p_mfgr, .p_type, .p_size, .s_suppkey, .s_name, .s_address, .s_nationkey, .s_phone, .s_acctbal, .s_comment                
                   HashJoin(Inner p_partkey, ps_partkey) cost (output_rows=800000, cpu=804000, disk=0, total=2684) -> .ps_partkey, .ps_suppkey, .ps_supplycost, .p_partkey, .p_mfgr, .p_type, .p_size                   
                      FileScan({SolutionDirectory}tpch/1/partsupp2.parquet) cost (output_rows=800000, cpu=800000, disk=7, total=800) -> .ps_partkey, .ps_suppkey, .ps_supplycost                   
                      Filter(ends_with(p_type, BRASS)) cost (output_rows=2000, cpu=80000, disk=0, total=1080) -> .p_partkey, .p_mfgr, .p_type, .p_size                      
                         Filter(p_size = 15) cost (output_rows=20000, cpu=800000, disk=0, total=1000) -> .p_partkey, .p_mfgr, .p_type, .p_size                         
                            FileScan({SolutionDirectory}tpch/1/part2.parquet) cost (output_rows=200000, cpu=200000, disk=2, total=200) -> .p_partkey, .p_mfgr, .p_type, .p_size                
                   FileScan({SolutionDirectory}tpch/1/supplier2.parquet) cost (output_rows=10000, cpu=10000, disk=1, total=10) -> .s_suppkey, .s_name, .s_address, .s_nationkey, .s_phone, .s_acctbal, .s_comment             
                FileScan({SolutionDirectory}tpch/1/nation2.parquet) cost (output_rows=25, cpu=25, disk=1, total=0) -> .n_nationkey, .n_name, .n_regionkey          
             Filter(r_name = EUROPE) cost (output_rows=0, cpu=10, disk=0, total=0) -> .r_regionkey, .r_name             
                FileScan({SolutionDirectory}tpch/1/region2.parquet) cost (output_rows=5, cpu=5, disk=1, total=0) -> .r_regionkey, .r_name       
          HashAggregate(ps_partkey, min(ps_supplycost)) cost (output_rows=10, cpu=4800000, disk=0, total=8031) -> correlated0.ps_partkey, correlated0.min(ps_supplycost)          
             HashJoin(Inner r_regionkey, n_regionkey) cost (output_rows=800000, cpu=800000, disk=0, total=3231) -> .ps_partkey, .ps_suppkey, .ps_supplycost, .s_suppkey, .s_name, .s_address, .s_nationkey, .s_phone, .s_acctbal, .s_comment, .n_nationkey, .n_name, .n_regionkey, .r_regionkey, .r_name             
                HashJoin(Inner n_nationkey, s_nationkey) cost (output_rows=800000, cpu=800050, disk=0, total=2430) -> .ps_partkey, .ps_suppkey, .ps_supplycost, .s_suppkey, .s_name, .s_address, .s_nationkey, .s_phone, .s_acctbal, .s_comment, .n_nationkey, .n_name, .n_regionkey                
                   HashJoin(Inner s_suppkey, ps_suppkey) cost (output_rows=800000, cpu=820000, disk=0, total=1630) -> .ps_partkey, .ps_suppkey, .ps_supplycost, .s_suppkey, .s_name, .s_address, .s_nationkey, .s_phone, .s_acctbal, .s_comment                   
                      FileScan({SolutionDirectory}tpch/1/partsupp2.parquet) cost (output_rows=800000, cpu=800000, disk=7, total=800) -> .ps_partkey, .ps_suppkey, .ps_supplycost                   
                      FileScan({SolutionDirectory}tpch/1/supplier2.parquet) cost (output_rows=10000, cpu=10000, disk=1, total=10) -> .s_suppkey, .s_name, .s_address, .s_nationkey, .s_phone, .s_acctbal, .s_comment                
                   FileScan({SolutionDirectory}tpch/1/nation2.parquet) cost (output_rows=25, cpu=25, disk=1, total=0) -> .n_nationkey, .n_name, .n_regionkey             
                Filter(r_name = EUROPE) cost (output_rows=0, cpu=10, disk=0, total=0) -> .r_regionkey, .r_name                
                   FileScan({SolutionDirectory}tpch/1/region2.parquet) cost (output_rows=5, cpu=5, disk=1, total=0) -> .r_regionkey, .r_name