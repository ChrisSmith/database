select t1.Id FROM table t1, table t2 where t1.Id = t1.CategoricalInt and t1.Id = 1

Original
Project(Id) -> t1.Id
 JoinSet(t1 (Cross) x t2 (Cross)) -> t1.Id, t1.Unordered, t1.Name, t1.CategoricalInt, t1.CategoricalString, t2.Id, t2.Unordered, t2.Name, t2.CategoricalInt, t2.CategoricalString 
 UnaryEdge { Expression = Id = CategoricalInt, Relation = t1 }
 UnaryEdge { Expression = Id = 1, Relation = t1 }
    Scan(table) -> t1.Id, t1.Unordered, t1.Name, t1.CategoricalInt, t1.CategoricalString    
    Scan(table) -> t2.Id, t2.Unordered, t2.Name, t2.CategoricalInt, t2.CategoricalString    


Optimized
Project(Id) -> t1.Id
 Join(Cross) -> t1.Id, t1.CategoricalInt, t2.Id, t2.CategoricalInt 
    Filter(Id = 1) -> t1.Id, t1.CategoricalInt    
       Filter(Id = CategoricalInt) -> t1.Id, t1.CategoricalInt       
          Scan(table) with projection  -> t1.Id, t1.CategoricalInt          
 
    Scan(table) with projection  -> t2.Id, t2.CategoricalInt    


Cost Optimized
Project(Id) cost (output_rows=100000000, cpu=100000000, disk=0, total=200423) -> .Id
 NestedLoopJoin() cost (output_rows=100000000, cpu=100000000, disk=10, total=100423) -> t1.Id, t1.CategoricalInt, t2.Id, t2.CategoricalInt 
    Filter(Id = 1) cost (output_rows=1000, cpu=20000, disk=0, total=321) -> t1.Id, t1.CategoricalInt    
       Filter(Id = CategoricalInt) cost (output_rows=10000, cpu=200000, disk=0, total=301) -> t1.Id, t1.CategoricalInt       
          FileScan({SolutionDirectory}data.parquet) cost (output_rows=100000, cpu=100000, disk=10, total=101) -> t1.Id, t1.CategoricalInt 
    FileScan({SolutionDirectory}data.parquet) cost (output_rows=100000, cpu=100000, disk=10, total=101) -> t2.Id, t2.CategoricalInt