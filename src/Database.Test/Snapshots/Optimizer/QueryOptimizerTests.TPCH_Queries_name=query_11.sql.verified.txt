SELECT
    ps_partkey,
    SUM(ps_supplycost * ps_availqty) AS value
FROM
    partsupp,
    supplier,
    nation
WHERE
    ps_suppkey = s_suppkey
    AND s_nationkey = n_nationkey
    AND n_name = 'GERMANY'
GROUP BY
    ps_partkey
HAVING
    SUM(ps_supplycost * ps_availqty) > (
        SELECT
            SUM(ps_supplycost * ps_availqty) * 0.0001
        FROM
            partsupp,
            supplier,
            nation
        WHERE
            ps_suppkey = s_suppkey
            AND s_nationkey = n_nationkey
            AND n_name = 'GERMANY'
    )
ORDER BY
    value DESC;


Original
PlanWithSubQueries(u=1) -> .ps_partkey, .value
 Project(SUM(ps_supplycost * cast(ps_availqty as Decimal)) * 0.0001) -> .SUM(ps_supplycost * cast(ps_availqty as Decimal)) * 0.0001 
    Agg(SUM(ps_supplycost * cast(ps_availqty as Decimal))) group by () -> .SUM(ps_supplycost * cast(ps_availqty as Decimal))    
       JoinSet(partsupp (Inner) x supplier (Inner) x nation (Inner)) -> .ps_partkey, .ps_suppkey, .ps_availqty, .ps_supplycost, .ps_comment, .s_suppkey, .s_name, .s_address, .s_nationkey, .s_phone, .s_acctbal, .s_comment, .n_nationkey, .n_name, .n_regionkey, .n_comment       
       BinaryEdge { Expression = ps_suppkey = s_suppkey, One = partsupp, Two = supplier }
       BinaryEdge { Expression = s_nationkey = n_nationkey, One = supplier, Two = nation }
       UnaryEdge { Expression = n_name = GERMANY, Relation = nation }
          Scan(partsupp) -> .ps_partkey, .ps_suppkey, .ps_availqty, .ps_supplycost, .ps_comment          
          Scan(supplier) -> .s_suppkey, .s_name, .s_address, .s_nationkey, .s_phone, .s_acctbal, .s_comment          
          Scan(nation) -> .n_nationkey, .n_name, .n_regionkey, .n_comment          
 Project(ps_partkey, value) -> .ps_partkey, .value 
    Sort(value DESC) -> .value, .ps_partkey, .SUM(ps_supplycost * cast(ps_availqty as Decimal))    
       Filter(SUM(ps_supplycost * cast(ps_availqty as Decimal)) > subquery(1)) -> .value, .ps_partkey, .SUM(ps_supplycost * cast(ps_availqty as Decimal))       
          Agg(SUM(ps_supplycost * cast(ps_availqty as Decimal)), ps_partkey, SUM(ps_supplycost * cast(ps_availqty as Decimal))) group by (ps_partkey) -> .value, .ps_partkey, .SUM(ps_supplycost * cast(ps_availqty as Decimal))          
             JoinSet(partsupp (Inner) x supplier (Inner) x nation (Inner)) -> .ps_partkey, .ps_suppkey, .ps_availqty, .ps_supplycost, .ps_comment, .s_suppkey, .s_name, .s_address, .s_nationkey, .s_phone, .s_acctbal, .s_comment, .n_nationkey, .n_name, .n_regionkey, .n_comment             
             BinaryEdge { Expression = ps_suppkey = s_suppkey, One = partsupp, Two = supplier }
             BinaryEdge { Expression = s_nationkey = n_nationkey, One = supplier, Two = nation }
             UnaryEdge { Expression = n_name = GERMANY, Relation = nation }
                Scan(partsupp) -> .ps_partkey, .ps_suppkey, .ps_availqty, .ps_supplycost, .ps_comment                
                Scan(supplier) -> .s_suppkey, .s_name, .s_address, .s_nationkey, .s_phone, .s_acctbal, .s_comment                
                Scan(nation) -> .n_nationkey, .n_name, .n_regionkey, .n_comment                


Optimized
PlanWithSubQueries(u=1) -> .ps_partkey, .value
 Project(SUM(ps_supplycost * cast(ps_availqty as Decimal)) * 0.0001) -> .SUM(ps_supplycost * cast(ps_availqty as Decimal)) * 0.0001 
    Agg(SUM(ps_supplycost * cast(ps_availqty as Decimal))) group by () -> .SUM(ps_supplycost * cast(ps_availqty as Decimal))    
       Join(Inner on s_nationkey = n_nationkey) -> .ps_suppkey, .ps_availqty, .ps_supplycost, .s_suppkey, .s_nationkey, .n_nationkey, .n_name       
          Join(Inner on ps_suppkey = s_suppkey) -> .ps_suppkey, .ps_availqty, .ps_supplycost, .s_suppkey, .s_nationkey          
             Scan(partsupp) with projection  -> .ps_suppkey, .ps_availqty, .ps_supplycost             
          
             Scan(supplier) with projection  -> .s_suppkey, .s_nationkey             
       
          Filter(n_name = GERMANY) -> .n_nationkey, .n_name          
             Scan(nation) with projection  -> .n_nationkey, .n_name             
 Project(ps_partkey, value) -> .ps_partkey, .value 
    Sort(value DESC) -> .value, .ps_partkey, .SUM(ps_supplycost * cast(ps_availqty as Decimal))    
       Filter(SUM(ps_supplycost * cast(ps_availqty as Decimal)) > subquery(1)) -> .value, .ps_partkey, .SUM(ps_supplycost * cast(ps_availqty as Decimal))       
          Agg(SUM(ps_supplycost * cast(ps_availqty as Decimal)), ps_partkey, SUM(ps_supplycost * cast(ps_availqty as Decimal))) group by (ps_partkey) -> .value, .ps_partkey, .SUM(ps_supplycost * cast(ps_availqty as Decimal))          
             Join(Inner on s_nationkey = n_nationkey) -> .ps_partkey, .ps_suppkey, .ps_availqty, .ps_supplycost, .s_suppkey, .s_nationkey, .n_nationkey, .n_name             
                Join(Inner on ps_suppkey = s_suppkey) -> .ps_partkey, .ps_suppkey, .ps_availqty, .ps_supplycost, .s_suppkey, .s_nationkey                
                   Scan(partsupp) with projection  -> .ps_partkey, .ps_suppkey, .ps_availqty, .ps_supplycost                   
                
                   Scan(supplier) with projection  -> .s_suppkey, .s_nationkey                   
             
                Filter(n_name = GERMANY) -> .n_nationkey, .n_name                
                   Scan(nation) with projection  -> .n_nationkey, .n_name                   


Cost Optimized
PlanWithSubQueries(u=1) -> .ps_partkey, .value
 Project(SUM(ps_supplycost * cast(ps_availqty as Decimal)) * 0.0001) cost (output_rows=800000, cpu=1600000, disk=0, total=4830) -> .SUM(ps_supplycost * cast(ps_availqty as Decimal)) * 0.0001 
    UngroupedAggregate(SUM(ps_supplycost * cast(ps_availqty as Decimal))) cost (output_rows=800000, cpu=800000, disk=0, total=3230) -> .SUM(ps_supplycost * cast(ps_availqty as Decimal))    
       HashJoin(Inner n_nationkey, s_nationkey) cost (output_rows=800000, cpu=800004, disk=0, total=2430) -> .ps_suppkey, .ps_availqty, .ps_supplycost, .s_suppkey, .s_nationkey, .n_nationkey, .n_name       
          HashJoin(Inner s_suppkey, ps_suppkey) cost (output_rows=800000, cpu=820000, disk=0, total=1630) -> .ps_suppkey, .ps_availqty, .ps_supplycost, .s_suppkey, .s_nationkey          
             FileScan({SolutionDirectory}tpch/1/partsupp2.parquet) cost (output_rows=800000, cpu=800000, disk=7, total=800) -> .ps_suppkey, .ps_availqty, .ps_supplycost          
             FileScan({SolutionDirectory}tpch/1/supplier2.parquet) cost (output_rows=10000, cpu=10000, disk=1, total=10) -> .s_suppkey, .s_nationkey       
          Filter(n_name = GERMANY) cost (output_rows=2, cpu=50, disk=0, total=0) -> .n_nationkey, .n_name          
             FileScan({SolutionDirectory}tpch/1/nation2.parquet) cost (output_rows=25, cpu=25, disk=1, total=0) -> .n_nationkey, .n_name Project(ps_partkey, value) cost (output_rows=1, cpu=2, disk=0, total=10430) -> .ps_partkey, .value 
    Sort(value DESC) cost (output_rows=1, cpu=0, disk=0, total=10430) -> .ps_partkey, .value, .SUM(ps_supplycost * cast(ps_availqty as Decimal))    
       Filter(SUM(ps_supplycost * cast(ps_availqty as Decimal)) > subquery(1)) cost (output_rows=1, cpu=30, disk=0, total=10430) -> .ps_partkey, .value, .SUM(ps_supplycost * cast(ps_availqty as Decimal))       
          HashAggregate(ps_partkey, SUM(ps_supplycost * cast(ps_availqty as Decimal)), SUM(ps_supplycost * cast(ps_availqty as Decimal))) cost (output_rows=10, cpu=8000000, disk=0, total=10430) -> .ps_partkey, .value, .SUM(ps_supplycost * cast(ps_availqty as Decimal))          
             HashJoin(Inner n_nationkey, s_nationkey) cost (output_rows=800000, cpu=800004, disk=0, total=2430) -> .ps_partkey, .ps_suppkey, .ps_availqty, .ps_supplycost, .s_suppkey, .s_nationkey, .n_nationkey, .n_name             
                HashJoin(Inner s_suppkey, ps_suppkey) cost (output_rows=800000, cpu=820000, disk=0, total=1630) -> .ps_partkey, .ps_suppkey, .ps_availqty, .ps_supplycost, .s_suppkey, .s_nationkey                
                   FileScan({SolutionDirectory}tpch/1/partsupp2.parquet) cost (output_rows=800000, cpu=800000, disk=7, total=800) -> .ps_partkey, .ps_suppkey, .ps_availqty, .ps_supplycost                
                   FileScan({SolutionDirectory}tpch/1/supplier2.parquet) cost (output_rows=10000, cpu=10000, disk=1, total=10) -> .s_suppkey, .s_nationkey             
                Filter(n_name = GERMANY) cost (output_rows=2, cpu=50, disk=0, total=0) -> .n_nationkey, .n_name                
                   FileScan({SolutionDirectory}tpch/1/nation2.parquet) cost (output_rows=25, cpu=25, disk=1, total=0) -> .n_nationkey, .n_name